import com.liferay.gradle.util.FileUtil
import com.liferay.gradle.util.copy.StripPathSegmentsAction

import org.gradle.execution.ProjectConfigurer
import org.gradle.util.GUtil

task cleanProjectTemplatesTests(type: Delete)
task projectTemplateJarVersions
task testAPIJar(type: Jar, dependsOn: testClasses)
task uploadProjectTemplateArchives
task writeProjectTemplateVersions

Set<Project> projectTemplateProjects = project.parent.subprojects.findAll {
	(!it.name.equals("project-templates-extensions")) && it.name.startsWith("project-templates")
}

ProjectConfigurer projectConfigurer = gradle.services.get(ProjectConfigurer)

bundle {
	includeTransitiveDependencies = true
}

cleanProjectTemplatesTests {
	delete fileTree(dir: processTestResources.destinationDir, include: "*.jar")
}

configurations {
	projectTemplates
	testAPI

	projectTemplatesTests {
		extendsFrom projectTemplates

		resolutionStrategy.dependencySubstitution.all {
			DependencySubstitution dependencySubstitution ->

			ComponentSelector componentSelector = dependencySubstitution.requested

			if ((componentSelector instanceof ModuleComponentSelector) && componentSelector.module.startsWith("com.liferay.project.templates.")) {
				String template = componentSelector.module.substring(30)

				template = template.replace('.' as char, '-' as char)

				Project projectTemplateProject = project.parent.childProjects["project-templates-" + template]

				projectConfigurer.configure projectTemplateProject

				dependencySubstitution.useTarget projectTemplateProject
			}
		}
	}
}

artifacts {
	testAPI testAPIJar
}

dependencies {
	compileInclude group: "com.beust", name: "jcommander", version: "1.72"
	compileInclude group: "com.liferay", name: "com.liferay.project.templates.extensions", version: "1.0.20"

	compileOnly group: "biz.aQute.bnd", name: "biz.aQute.bnd", version: "3.5.0"
	compileOnly group: "org.apache.maven.archetype", name: "archetype-common", version: "2.4"

	projectTemplates group: "com.liferay", name: "com.liferay.project.templates.activator", version: "1.0.82"
	projectTemplates group: "com.liferay", name: "com.liferay.project.templates.api", version: "1.0.83"
	projectTemplates group: "com.liferay", name: "com.liferay.project.templates.content.targeting.report", version: "1.0.81"
	projectTemplates group: "com.liferay", name: "com.liferay.project.templates.content.targeting.rule", version: "1.0.81"
	projectTemplates group: "com.liferay", name: "com.liferay.project.templates.content.targeting.tracking.action", version: "1.0.81"
	projectTemplates group: "com.liferay", name: "com.liferay.project.templates.control.menu.entry", version: "1.0.81"
	projectTemplates group: "com.liferay", name: "com.liferay.project.templates.form.field", version: "1.0.80"
	projectTemplates group: "com.liferay", name: "com.liferay.project.templates.fragment", version: "1.0.80"
	projectTemplates group: "com.liferay", name: "com.liferay.project.templates.freemarker.portlet", version: "1.0.78"
	projectTemplates group: "com.liferay", name: "com.liferay.project.templates.layout.template", version: "1.0.78"
	projectTemplates group: "com.liferay", name: "com.liferay.project.templates.modules.ext", version: "1.0.65"
	projectTemplates group: "com.liferay", name: "com.liferay.project.templates.mvc.portlet", version: "1.0.79"
	projectTemplates group: "com.liferay", name: "com.liferay.project.templates.npm.angular.portlet", version: "1.0.76"
	projectTemplates group: "com.liferay", name: "com.liferay.project.templates.npm.react.portlet", version: "1.0.76"
	projectTemplates group: "com.liferay", name: "com.liferay.project.templates.npm.vuejs.portlet", version: "1.0.76"
	projectTemplates group: "com.liferay", name: "com.liferay.project.templates.panel.app", version: "1.0.79"
	projectTemplates group: "com.liferay", name: "com.liferay.project.templates.portlet.configuration.icon", version: "1.0.79"
	projectTemplates group: "com.liferay", name: "com.liferay.project.templates.portlet.provider", version: "1.0.79"
	projectTemplates group: "com.liferay", name: "com.liferay.project.templates.portlet.toolbar.contributor", version: "1.0.79"
	projectTemplates group: "com.liferay", name: "com.liferay.project.templates.rest", version: "1.0.81"
	projectTemplates group: "com.liferay", name: "com.liferay.project.templates.service", version: "1.0.79"
	projectTemplates group: "com.liferay", name: "com.liferay.project.templates.service.builder", version: "1.0.82"
	projectTemplates group: "com.liferay", name: "com.liferay.project.templates.service.wrapper", version: "1.0.79"
	projectTemplates group: "com.liferay", name: "com.liferay.project.templates.simulation.panel.entry", version: "1.0.79"
	projectTemplates group: "com.liferay", name: "com.liferay.project.templates.social.bookmark", version: "1.0.72"
	projectTemplates group: "com.liferay", name: "com.liferay.project.templates.spring.mvc.portlet", version: "1.0.77"
	projectTemplates group: "com.liferay", name: "com.liferay.project.templates.template.context.contributor", version: "1.0.79"
	projectTemplates group: "com.liferay", name: "com.liferay.project.templates.theme", version: "1.0.80"
	projectTemplates group: "com.liferay", name: "com.liferay.project.templates.theme.contributor", version: "1.0.78"
	projectTemplates group: "com.liferay", name: "com.liferay.project.templates.war.core.ext", version: "1.0.49"
	projectTemplates group: "com.liferay", name: "com.liferay.project.templates.war.hook", version: "1.0.75"
	projectTemplates group: "com.liferay", name: "com.liferay.project.templates.war.mvc.portlet", version: "1.0.75"
	projectTemplates group: "com.liferay", name: "com.liferay.project.templates.workspace", version: "1.0.82"

	testCompile gradleTestKit()
	testCompile group: "com.googlecode.java-diff-utils", name: "diffutils", version: "1.3.0"
	testCompile group: "com.liferay", name: "com.liferay.maven.executor", version: "1.0.0"
	testCompile group: "junit", name: "junit", version: "4.12"
	testCompile group: "net.diibadaaba.zipdiff", name: "zipdiff", version: "1.0"
}

liferayOSGi {
	expandCompileInclude = true
}

processResources {
	from configurations.projectTemplates
	from projectTemplateJarVersions
}

processTestResources {
	dependsOn cleanProjectTemplatesTests
	from configurations.projectTemplatesTests
}

projectTemplateJarVersions {
	File projectTemplateVersionsFile = new File(buildDir, "project-template-jar-versions.properties")

	outputs.file(projectTemplateVersionsFile)

	Properties properties = new Properties()

	doFirst {
		configurations.projectTemplates.dependencies.each {
			properties.setProperty(it.name, it.version)
		}

	}

	doLast {
		properties.store(projectTemplateVersionsFile.newWriter(), null)
	}
}

repositories {
	File dir = rootProject.projectDir

	while (dir != null) {
		File tmpMavenRepositoryDir = new File(dir, ".m2-tmp")

		if (tmpMavenRepositoryDir.exists()) {
			maven {
				url tmpMavenRepositoryDir
			}
		}

		dir = dir.getParentFile();
	}
}

test {
	dependsOn projectTemplateProjects.collect {
		"${it.path}:install"
	}

	dependsOn writeProjectTemplateVersions

	systemProperties projectTemplateTokens
}

testAPIJar {
	classifier = "tests"
	from sourceSets.test.output
}

updateFileVersions {
	replaceOnlyIf([{
		String group, String replacement, String content, File contentFile ->

		if (contentFile.name == "releng-pom.gradle") {
			return false
		}

		return true
	}])
}

uploadProjectTemplateArchives {
	dependsOn projectTemplateProjects.collect {
		"${it.path}:uploadArchives"
	}
}

writeProjectTemplateVersions {
	doLast {
		Properties properties = new Properties()

		for (Project projectTemplateProject in projectTemplateProjects) {
			Properties bndProperties = GUtil.loadProperties(projectTemplateProject.file("bnd.bnd"))

			properties.setProperty bndProperties["Bundle-SymbolicName"], bndProperties["Bundle-Version"]
		}

		File projectTemplateVersionsFile = new File(buildDir, "project-template-versions.properties")

		projectTemplateVersionsFile.parentFile.mkdirs()

		projectTemplateVersionsFile.withOutputStream {
			properties.store it, null
		}
	}
}